prototype(Sitegeist.PaperTiger:FieldCollection.SchemaRenderer) < prototype(Neos.Fusion:Component) {
  nodePath = null

  renderer = Sitegeist.PaperTiger:FieldCollection.SchemaRenderer.Internal {
    schemaMap = Neos.Fusion:Reduce {
      items = ${q(node).children(props.nodePath).find('[instanceof Sitegeist.PaperTiger:Field]').get()}
      itemName = 'node'
      carryName = 'carry'
      itemReducer = Neos.Fusion:Value {
          name =  ${q(node).property('name')}
          schema = Neos.Fusion:Renderer {
            @if.canRender = Neos.Fusion:CanRender {
              type = ${node.nodeType.name + '.Schema'}
            }
            type = ${node.nodeType.name + '.Schema'}
          }
          value = ${(this.name && this.schema) ? Array.set(carry, this.name, this.schema) : value}
      }
      initialValue = ${{}}
    }
  }
}

prototype(Sitegeist.PaperTiger:FieldCollection.SchemaRenderer.Internal) {
  @class = '\\Sitegeist\\PaperTiger\\FusionObjects\\SchemaCollectionImplementation'
}



prototype(Sitegeist.PaperTiger:ActionCollection.DefinitionRenderer.ContentCase) < prototype(Neos.Fusion:Case) {

  override {
    @position = 'before schema'
    condition = Neos.Fusion:CanRender {
      type = ${node.nodeType.name + '.Schema.Override'}
    }
    type = ${node.nodeType.name + '.Schema.Override'}
  }

  schema {
    @position = 'end'
    condition = Neos.Fusion:CanRender {
      type = ${node.nodeType.name + '.Schema'}
    }
    type = ${node.nodeType.name + '.Schema'}
  }
}
