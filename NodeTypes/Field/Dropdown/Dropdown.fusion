prototype(Sitegeist.PaperTiger:Field.Dropdown) < prototype(Neos.Neos:ContentComponent) {
    name = ${q(node).property('name')}
    label = ${q(node).property('label')}
    isRequired = ${q(node).property('isRequired')}
    isMultiple = ${q(node).property('isMultiple')}
    options = ${q(node).property('options')}

    emptyLabel = ${q(node).property('emptyLabel')}
    emptyOptionEnabled = ${q(node).property('emptyOptionEnabled')}

    customErrorMessageEnabled = ${q(node).property('customErrorMessageEnabled')}
    customErrorMessage = ${q(node).property('customErrorMessage')}

    renderer = afx`
        <Sitegeist.PaperTiger:FieldContainer
            field.name={props.name}
            field.multiple={props.isMultiple}
            label={props.label}
        >
            <Neos.Fusion.Form:Select
                attributes.required={props.isRequired}
                attributes.oninvalid={"this.setCustomValidity('" + props.customErrorMessage + "')"}
                attributes.oninvalid.@if={props.customErrorMessageEnabled}
                attributes.oninput={"this.setCustomValidity('')"}
                attributes.oninput.@if={props.customErrorMessageEnabled}
                attributes.id={'field_' + field.name}
            >
                <Neos.Fusion.Form:Select.Option option.value="" attributes.label={props.emptyLabel}
                                                @if={props.emptyOptionEnabled}/>
                <Neos.Fusion:Loop items={props.options} itemName="item">
                    <Neos.Fusion.Form:Select.Option
                        option.value={item.value}>{item.label}</Neos.Fusion.Form:Select.Option>
                </Neos.Fusion:Loop>
            </Neos.Fusion.Form:Select>
        </Sitegeist.PaperTiger:FieldContainer>
    `
}
