prototype(Sitegeist.PaperTiger:Field.Upload.Renderer) < prototype(Neos.Fusion:Component) {
  identifier = ${q(node).property('identifier')}
  label = ${q(node).property('label')}

  isMultiple = ${q(node).property('isMultiple')}
  isRequired = ${q(node).property('isRequired')}
  allowedExtensions = ${q(node).property('allowedExtensions')}

  renderer = afx`
    <Sitegeist.PaperTiger:FieldContainer
      field.name={props.identifier}
      field.multiple={props.isMultiple}
      label={props.label}
    >

      <Neos.Fusion:Fragment @if={!field.isMultiple()} @if={Type.instance(field.getCurrentValue(), 'Sitegeist\FusionForm\Upload\Domain\CachedUploadedFile')}>
        {field.currentValue.clientFilename} ({field.currentValue.clientMediaType} / {field.currentValue.size}) <br/>
      </Neos.Fusion:Fragment>

      <Neos.Fusion:Loop @if={field.isMultiple()} @if={field.getCurrentValue()} items={field.getCurrentValue()} itemName="item" >
        <Neos.Fusion:Fragment @if.has={Type.instance(item, 'Sitegeist\FusionForm\Upload\Domain\CachedUploadedFile')}>
          {item.clientFilename} ({item.clientMediaType} / {item.size}) <br/>
        </Neos.Fusion:Fragment>
      </Neos.Fusion:Loop>

      <Sitegeist.FusionForm.Upload:Field.Upload
        attributes.class={Configuration.setting('Sitegeist.PaperTiger.rendering.classes.field.upload')}
        attributes.required={props.isRequired}
        attributes.accept={props.allowedExtensions ? '.' + Array.join(props.allowedExtensions, ',.') : false}
      />
    </Sitegeist.PaperTiger:FieldContainer>
  `
}
